####Linear Regression Predictive Model####
trainIndices = sample(seq(1:length(LR$MonthlyIncome)),round(.7*length(LR$MonthlyIncome)))
trainLR = LR[trainIndices,]
testLR = LR[-trainIndices,]
fit1 <- lm(MonthlyIncome~DistanceFromHome + TotalWorkingYears + YearsWithCurrManager + JobLevel, data=LR)
Income <- predict(fit1, testLR)
###Find p-values, Adjusted R^2 values, and other summary statisitics.####
summary(fit1)
confint(fit1)
####Salary Predictions####
####Read Data####
Income <- read.csv(file.choose(), header = TRUE)
####Predict Test Data from Model####
Income$MonthlyIncome <- predict(fit1, Income)
write.csv(Income, file = "Income_prediction.csv")
head(attrition)
set.seed(1)
iterations = 500
numks = 60
splitPerc = .5
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7)],test[,c(7)],train$Attrition, prob = TRUE, k = i)
table(classifications,test$Attrition)
CM = confusionMatrix(table(classifications,test$Attrition))
masterAcc[j,i] = CM$overall[1]
}
}
dim(test)
dim(train)
#KNN
#Loop for average of many training / test partition
##[,c("BusinessTravel", "DistanceFromHome", "EnvironmentSatisfaction", "JobInvolvement", "JobRole", "JobSatisfaction", "MaritalStatus", "NumCompaniesWorked", "OverTime", "RelationshipSatisfaction", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance")]
set.seed(6)
splitPerc = .75
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
# k = 3
classifications = knn(train[,c(2,6,11, 14,16)],test[,c(2,6,11,14,16)],train$Attrition, prob = TRUE, k = 3)
#KNN
#Loop for average of many training / test partition
##[,c("BusinessTravel", "DistanceFromHome", "EnvironmentSatisfaction", "JobInvolvement", "JobRole", "JobSatisfaction", "MaritalStatus", "NumCompaniesWorked", "OverTime", "RelationshipSatisfaction", "TotalWorkingYears", "TrainingTimesLastYear", "WorkLifeBalance")]
set.seed(6)
splitPerc = .75
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
# k = 3
#classifications = knn(train[,c(2,6,11, 14,16)],test[,c(2,6,11,14,16)],train$Attrition, prob = TRUE, k = 3)
#table(classifications,test$Attrition)
#confusionMatrix(table(classifications,test$Attrition))
# k = 5
classifications = knn(train[,c(2,6)],test[,c(2,6)],train$Attrition, prob = TRUE, k = 5)
#Kitchen Sink approach
model = naiveBayes(attrition[,c(2, 4:26)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(2, 4:26)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
# NB Loop for average of many training / test partition
iterations = 100
masterAcc = matrix(nrow = iterations)
splitPerc = .5 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
model = naiveBayes(train[,c(2,4:26)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
table(predict(model,test[,c(2,4:26)]),as.factor(attrition$Attrition))
CM = confusionMatrix(table(predict(model,test[,c(2,4:26)]),as.factor(attrition$Attrition)))
masterAcc[j] = CM$overall[1]
}
set.seed(1)
iterations = 500
numks = 60
splitPerc = .5
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(7)],test[,c(7)],train$Attrition, prob = TRUE, k = i)
table(classifications,test$Attrition)
CM = confusionMatrix(table(classifications,test$Attrition))
masterAcc[j,i] = CM$overall[1]
}
}
#Kitchen Sink approach
model = naiveBayes(attrition[,c(2, 4:26)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(2, 4:26)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
# NB Loop for average of many training / test partition
iterations = 100
masterAcc = matrix(nrow = iterations)
splitPerc = .5 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
model = naiveBayes(train[,c(2,4:26)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
table(predict(model,test[,c(2,4:26)]),as.factor(attrition$Attrition))
CM = confusionMatrix(table(predict(model,test[,c(2,4:26)]),as.factor(attrition$Attrition)))
masterAcc[j] = CM$overall[1]
}
head(test)
head(train)
# k = 3
classifications = knn(train[,c(2,7,16,27,29,30)],test[,c(2,7,16,27,29,30)],train$Attrition, prob = TRUE, k = 3)
table(classifications,test$Attrition)
confusionMatrix(table(classifications,test$Attrition))
# k = 3
classifications = knn(train[,c(2,7,16,27,29,30)],test[,c(2,7,16,27,29,30)],train$Attrition, prob = TRUE, k = 30)
table(classifications,test$Attrition)
confusionMatrix(table(classifications,test$Attrition))
# k = 3
classifications = knn(train[,c(2,7,16,27,29,30)],test[,c(2,7,16,27,29,30)],train$Attrition, prob = TRUE, k = 20)
table(classifications,test$Attrition)
confusionMatrix(table(classifications,test$Attrition))
# k = 3
classifications = knn(train[,c(16,18,20,22,25)],test[,c(16,18,20,22,25)],train$Attrition, prob = TRUE, k = 3)
table(classifications,test$Attrition)
confusionMatrix(table(classifications,test$Attrition))
# k = 3
classifications = knn(train[,c(16,18,20,22,25)],test[,c(16,18,20,22,25)],train$Attrition, prob = TRUE, k = 15)
table(classifications,test$Attrition)
confusionMatrix(table(classifications,test$Attrition))
set.seed(4)
splitPerc = .5
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
# k = 3
classifications = knn(train[,c(16,18,20,22,25)],test[,c(16,18,20,22,25)],train$Attrition, prob = TRUE, k = 15)
table(classifications,test$Attrition)
confusionMatrix(table(classifications,test$Attrition))
# k = 3
classifications = knn(train[,c(4:9,12,14,16,20,21,23,25,28,30,31)],test[,c(4:9,12,14,16,20,21,23,25,28,30,31)],train$Attrition, prob = TRUE, k = 15)
knitr::opts_chunk$set(echo = TRUE)
#Kitchen Sink approach
model = naiveBayes(attrition[,c(2, 4:32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(2, 4:32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:32)]),attrition$Attrition))
CM
# NB Loop for average of many training / test partition
iterations = 100
masterAcc = matrix(nrow = iterations)
splitPerc = .7 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
model = naiveBayes(train[,c(2,4:32)],as.factor(attrition$Attrition),laplace = 1)
table(predict(model,test[,c(2,4:32)]),as.factor(attrition$Attrition))
CM = confusionMatrix(table(predict(model,test[,c(2,4:32)]),as.factor(attrition$Attrition)))
masterAcc[j] = CM$overall[1]
}
# k = 3
classifications = knn(train[,c(16,19,24,27)],test[,c(16,19,24,27)],train$Attrition, prob = TRUE, k = 15)
# NB Loop for average of many training / test partition
iterations = 100
masterAcc = matrix(nrow = iterations)
splitPerc = .5 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
model = naiveBayes(train[,c(16,19,24,27)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
table(predict(model,test[,c(16,19,24,27)]),as.factor(attrition$Attrition))
CM = confusionMatrix(table(predict(model,test[,c(16,19,24,27)]),as.factor(attrition$Attrition)))
masterAcc[j] = CM$overall[1]
}
model
model = naiveBayes(train[,c(16,19,24,27)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
table(predict(model,test[,c(16,19,24,27)]),as.factor(attrition$Attrition))
model = naiveBayes(train[,c(16,19,24,27)],(attrition$Attrition),laplace = 1, na.rm=FALSE)
model = naiveBayes(train[,c(16,19,24,27)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
model = naiveBayes(train[,c(16,19,24,27)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
classifications = knn(train[,c(16,19,24)],test[,c(16,19,24)],as.factor(attrition$Attrition), prob = TRUE, k = i)
str(attrition)
table(as.factor(test$Attrition),classifications)
#KNN
set.seed(4)
splitPerc = .5
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
# k = 3
classifications = knn(train[,c(16,19,24,27)],test[,c(16,19,24,27)],train$Attrition, prob = TRUE, k = 15)
# k = 3
classifications = knn(train[,c(16)],test[,c(16)],train$Attrition, prob = TRUE, k = 15)
str(test)
str(train)
set.seed(1)
splitPerc = .7
iterations = 100
numks = 60
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(60), k = numeric(60))
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(16,19,24)],test[,c(16,19,24)],as.factor(attrition$Attrition), prob = TRUE, k = i)
table(as.factor(test$Attrition),classifications)
CM = confusionMatrix(table(as.factor(test$Attrition),classifications))
masterAcc[j,i] = CM$overall[1]
}
}
max(MeanAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
which.max(MeanAcc)
max(MeanAcc)
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
which.max(MeanAcc)
max(MeanAcc)
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Kitchen Sink approach
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
# NB Loop for average of many training / test partition
iterations = 100
masterAcc = matrix(nrow = iterations)
splitPerc = .5 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
model = naiveBayes(train[,c(12,16,17,19,22,24,27,29,32)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
table(predict(model,test[,c(12,16,17,19,22,24,27,29,32)]),as.factor(attrition$Attrition))
CM = confusionMatrix(table(predict(model,test[,c(12,16,17,19,22,24,27,29,32)]),as.factor(attrition$Attrition)))
masterAcc[j] = CM$overall[1]
}
set.seed(1)
splitPerc = .7
iterations = 100
numks = 60
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(60), k = numeric(60))
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(16,19,24)],test[,c(16,19,24)],(attrition$Attrition), prob = TRUE, k = i)
table(as.factor(test$Attrition),classifications)
CM = confusionMatrix(table((test$Attrition),classifications))
masterAcc[j,i] = CM$overall[1]
}
}
#Kitchen Sink approach
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
# NB Loop for average of many training / test partition
iterations = 100
masterAcc = matrix(nrow = iterations)
splitPerc = .5 #Training / Test split Percentage
for(j in 1:iterations)
{
trainIndices = sample(1:dim(attrition)[1],round(splitPerc * dim(attrition)[1]))
train = attrition[trainIndices,]
test = attrition[-trainIndices,]
model = naiveBayes(train[,c(12,16,17,19,22,24,27,29,32)],as.factor(attrition$Attrition),laplace = 1, na.rm=FALSE)
table(predict(model,test[,c(12,16,17,19,22,24,27,29,32)]),as.factor(attrition$Attrition))
CM = confusionMatrix(table(predict(model,test[,c(12,16,17,19,22,24,27,29,32)]),as.factor(attrition$Attrition)))
masterAcc[j] = CM$overall[1]
}
#Naive Bayes
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Naive Bayes
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Cleaning up the dataset
#Creating Factors
attrition$BusinessTravel <- as.factor(attrition$BusinessTravel)
attrition$Department <- as.factor(attrition$Department)
attrition$EducationField <- as.factor(attrition$EducationField)
attrition$Gender <- as.factor(attrition$Gender)
attrition$JobRole <- as.factor(attrition$JobRole)
attrition$MaritalStatus<- as.factor(attrition$MaritalStatus)
attrition$OverTime <- as.factor(attrition$OverTime)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
#Removing irrelevant variables from both datasets
attrition$EmployeeNumber <- NULL
attrition$EmployeeCount <- NULL
attrition$StandardHours <- NULL
attrition$Over18 <- NULL
head(attrition)
#Naive Bayes
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Cleaning up the dataset
#Creating Factors
attrition$BusinessTravel <- as.factor(attrition$BusinessTravel)
attrition$Department <- as.factor(attrition$Department)
attrition$EducationField <- as.factor(attrition$EducationField)
attrition$Gender <- as.factor(attrition$Gender)
attrition$JobRole <- as.factor(attrition$JobRole)
attrition$MaritalStatus<- as.factor(attrition$MaritalStatus)
attrition$OverTime <- as.factor(attrition$OverTime)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
attrition$TrainingTimesLastYear <- as.factor(attrition$TrainingTimesLastYear)
#Removing irrelevant variables from both datasets
attrition$EmployeeNumber <- NULL
attrition$EmployeeCount <- NULL
attrition$StandardHours <- NULL
attrition$Over18 <- NULL
head(attrition)
#Naive Bayes
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Cleaning up the dataset
#Creating Factors
attrition$BusinessTravel <- as.factor(attrition$BusinessTravel)
attrition$Department <- as.factor(attrition$Department)
attrition$EducationField <- as.factor(attrition$EducationField)
attrition$Gender <- as.factor(attrition$Gender)
attrition$JobRole <- as.factor(attrition$JobRole)
attrition$MaritalStatus<- as.factor(attrition$MaritalStatus)
attrition$OverTime <- as.factor(attrition$OverTime)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
attrition$TrainingTimesLastYear <- as.factor(attrition$TrainingTimesLastYear)
attrition$YearsAtCompany <- as.factor(attrition$YearsAtCompany)
#Removing irrelevant variables from both datasets
attrition$EmployeeNumber <- NULL
attrition$EmployeeCount <- NULL
attrition$StandardHours <- NULL
attrition$Over18 <- NULL
head(attrition)
#Naive Bayes
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Cleaning up the dataset
#Creating Factors
attrition$BusinessTravel <- as.factor(attrition$BusinessTravel)
attrition$Department <- as.factor(attrition$Department)
attrition$EducationField <- as.factor(attrition$EducationField)
attrition$Gender <- as.factor(attrition$Gender)
attrition$JobRole <- as.factor(attrition$JobRole)
attrition$MaritalStatus<- as.factor(attrition$MaritalStatus)
attrition$OverTime <- as.factor(attrition$OverTime)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
attrition$TrainingTimesLastYear <- as.factor(attrition$TrainingTimesLastYear)
attrition$YearsAtCompany <- as.factor(attrition$YearsAtCompany)
attrition$YearsInCurrentRole <- as.factor(attrition$YearsInCurrentRole)
attrition$YearsSinceLastPromotion <- as.factor(attrition$YearsSinceLastPromotion)
attrition$YearsWithCurrManager <- as.factor(attrition$YearsWithCurrManager)
#Removing irrelevant variables from both datasets
attrition$EmployeeNumber <- NULL
attrition$EmployeeCount <- NULL
attrition$StandardHours <- NULL
attrition$Over18 <- NULL
head(attrition)
#Naive Bayes
model = naiveBayes(attrition[,c(12,16,17,19,22,24,27,29,32)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(12,16,17,19,22,24,27,29,32)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(2,4:26)]),attrition$Attrition))
CM
#Naive Bayes
model = naiveBayes(attrition[,c(16,17,19,24,27)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(16,17,19,24,27)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(16,17,19,24,27)]),attrition$Attrition))
CM
#Naive Bayes
model = naiveBayes(attrition[,c(8,9,12,15,16,17,18,19,22,24,26,27)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition))
CM
model = naiveBayes(attrition[,c(4,8,9,12,15,16,17,18,19,22,24,26,27)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(4,8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(4,8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition))
CM
model = naiveBayes(attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition))
CM
NB <- naiveBayes(Attrition~., data = attrition.test)
getwd()
setwd(dir = "C:/Users/sabrina.purvis/Documents/GitHub/DS-6306-Project2/Data Sets/.")
#run necessary libraries
library(ggplot2)
library(tidyverse)
library(shiny)
library(plotly)
library(GGally)
library(e1071)
library(caret)
library(glmnet)
library(plyr)
library(dplyr)
library(corrplot)
library(RCurl)
library(class)
library(ggpubr)
#read in dataset
attrition <- read.csv("Data Sets/CaseStudy2-data.csv", header=TRUE)
attrition.test <- read.csv("Data Sets/CaseStudy2CompSet No Attrition.csv", header=TRUE)
#create second file for salary
salary <- attrition
#Run Summary, header & NA checks
summary(attrition)
str(attrition)
sum(is.na(attrition))
#Cleaning up the dataset
#Creating Factors
attrition$BusinessTravel <- as.factor(attrition$BusinessTravel)
attrition$Department <- as.factor(attrition$Department)
attrition$EducationField <- as.factor(attrition$EducationField)
attrition$Gender <- as.factor(attrition$Gender)
attrition$JobRole <- as.factor(attrition$JobRole)
attrition$MaritalStatus<- as.factor(attrition$MaritalStatus)
attrition$OverTime <- as.factor(attrition$OverTime)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
attrition$TrainingTimesLastYear <- as.factor(attrition$TrainingTimesLastYear)
attrition$YearsAtCompany <- as.factor(attrition$YearsAtCompany)
attrition$YearsInCurrentRole <- as.factor(attrition$YearsInCurrentRole)
attrition$YearsSinceLastPromotion <- as.factor(attrition$YearsSinceLastPromotion)
attrition$YearsWithCurrManager <- as.factor(attrition$YearsWithCurrManager)
#Removing irrelevant variables from both datasets
attrition$EmployeeNumber <- NULL
attrition$EmployeeCount <- NULL
attrition$StandardHours <- NULL
attrition$Over18 <- NULL
head(attrition)
#looking at the correlation plots of continuous variables, specific ones can be excluded
#All of the "years" metrics show strong correlation.
#All of the rates data are duplicates of eachother
attrition$YearsSinceLastPromotion <- NULL
attrition$YearsWithCurrManager <- NULL
attrition$YearsInCurrentRole <- NULL
attrition$DailyRate <- NULL
attrition$HourlyRate <- NULL
attrition$MonthlyRate <- NULL
summary(attrition)
#fit full logistic model for variable selection assistance
fullmodel <- glm(Attrition~., family= binomial(link = "logit"), data = attrition)
summary(fullmodel)
#refine full model through fwd, bwd and stepwise methods
backward_model <- step(fullmodel)
forward_model <- step(fullmodel, direction = 'forward', k=2)
stepwise_model <- step(fullmodel, direction = 'both', k=2)
#Business Travel, Distance from home, job involvement, job satisfaction, marital status, # of comapanies, work life balance and overtime all are indicated as significant
NB <- naiveBayes(Attrition~., data = attrition.test)
#Naive Bayes
model = naiveBayes(attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)],attrition$Attrition,laplace = 1)
#read in dataset
attrition <- read.csv("Data Sets/CaseStudy2-data.csv", header=TRUE)
attrition.test <- read.csv("Data Sets/CaseStudy2CompSet No Attrition.csv", header=TRUE)
#create second file for salary
salary <- attrition
#Cleaning up the dataset
#Creating Factors
attrition$BusinessTravel <- as.factor(attrition$BusinessTravel)
attrition$Department <- as.factor(attrition$Department)
attrition$EducationField <- as.factor(attrition$EducationField)
attrition$Gender <- as.factor(attrition$Gender)
attrition$JobRole <- as.factor(attrition$JobRole)
attrition$MaritalStatus<- as.factor(attrition$MaritalStatus)
attrition$OverTime <- as.factor(attrition$OverTime)
attrition$WorkLifeBalance <- as.factor(attrition$WorkLifeBalance)
attrition$TrainingTimesLastYear <- as.factor(attrition$TrainingTimesLastYear)
attrition$YearsAtCompany <- as.factor(attrition$YearsAtCompany)
attrition$YearsInCurrentRole <- as.factor(attrition$YearsInCurrentRole)
attrition$YearsSinceLastPromotion <- as.factor(attrition$YearsSinceLastPromotion)
attrition$YearsWithCurrManager <- as.factor(attrition$YearsWithCurrManager)
head(attrition)
#Naive Bayes
model = naiveBayes(attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)],attrition$Attrition,laplace = 1)
table(predict(model,attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition)
CM = confusionMatrix(table(predict(model,attrition[,c(4,6,8,9,12,15,16,17,18,19,22,24,26,27)]),attrition$Attrition))
CM
prediction <- data.frame(predict(model,attrition.test[,c(2:26)]),(attrition.test$Attrition))
prediction <- data.frame(predict(model,attrition.test[,c("BusinessTravel","Department","Education","EducationField","EnvironmentalSatisfaction","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked","OverTime","PerformanceRating","RelationshipSatisfaction")]),(attrition.test$Attrition))
prediction <- data.frame(predict(model,attrition.test[,c(4,6,8,9,12,15,16,17,18,19,21,23,25,26)]),(attrition.test$Attrition))
